#include "EmonLib.h"
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);
EnergyMonitor emon;
#define vCalibration 106.8
#define currCalibration 0.52

float  PF= 0;
unsigned long lastmillis = millis();



void setup() {
  Serial.begin(9600);
  lcd.begin();
  lcd.backlight();
  emon.voltage(35, vCalibration, 1.7);  // Voltage: input pin, calibration, phase_shift
  emon.current(33, currCalibration);    // Current: input pin, calibration.
}

void loop() {

emon.calcVI(20, 2000);
  Serial.print("Vrms: ");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Voltage:");
  Serial.print(emon.Vrms);
  Serial.print("V");
  lcd.setCursor(5, 1);
  lcd.print(emon.Vrms);
  lcd.print("V");
  delay(1000);

  Serial.print("\tIrms: ");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Current:");
  Serial.print(emon.Irms);
  Serial.print("A");
  lcd.setCursor(5, 1);
  lcd.print(emon.Irms);
  lcd.print("Amp");
  delay(1000);
  
  Serial.print("\tPower: ");
  Serial.print(emon.apparentPower);
  Serial.print("W");
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Power:");
  lcd.setCursor(5, 1);
  lcd.print(emon.apparentPower);
  lcd.print("W");
  delay(1000);
/*
  Serial.print("\tkWh: ");
  kWh = kWh + emon.apparentPower * (millis() - lastmillis) / 3600000000.0;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("KiloWatt Hour:");
  lcd.setCursor(5, 1);
  lcd.print(kWh);
  lcd.print("kwh");
  delay(1000);
  Serial.print(kWh);
  Serial.println("kWh");
  lastmillis = millis();
*/
  PF = emon.apparentPower / ( emon.Vrms -  emon.Irms);
  Serial.print("PF");
  Serial.println(PF);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Power Factor:");
  lcd.setCursor(5, 1);
  lcd.print(PF);
  lcd.print("pf");
  delay(1000);
  
}
